@using Microsoft.AspNetCore.Components.Web
@namespace CanvasComponentServerExample.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="CanvasComponentServerExample.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js"></script>
    <script src="_content/CanvasComponentLibraryExample/Scripts/canvasDrawingInterop.js"></script>
@*    <script>
        function onResize() {
            if (!window.console.canvas)
                return;

            console.canvas.width = window.innerWidth;
            console.canvas.height = window.innerHeight;

            console.instance.invokeMethodAsync('OnResize', console.canvas.width, console.canvas.height);
        }

        //window.consoleWindowResize = (instance) => {
        //    onResize();
        //};

        window.initConsole = (instance) => {
            var canvasContainer = document.getElementById('divCanvas'),
                canvases = canvasContainer.getElementsByTagName('canvas') || [];
            window.console = {
                instance: instance,
                canvas: canvases.length ? canvases[0] : null
            };

            if (window.console.canvas) {
                //window.console.canvas.onmousemove = (e) => {
                //    console.instance.invokeMethodAsync('OnClick', e.clientX, e.clientY);
                //};
                window.console.canvas.onmousedown = (e) => {
                    var me = {
                        Button: e.button,
                        ClientX: e.clientX,
                        ClientY: e.clientY
                    };
                    console.instance.invokeMethodAsync('OnClick', me);
                };
                //window.console.canvas.onmouseup = (e) => {
                //    var me = {
                //        Button: e.button
                //    };
                //    console.instance.invokeMethodAsync('OnMouseUp', me);
                //};

                window.console.canvas.onkeydown = (e) => {
                    console.instance.invokeMethodAsync('OnKeyDown', e);
                };
                //window.console.canvas.onkeyup = (e) => {
                //    console.instance.invokeMethodAsync('OnKeyUp', e.keyCode);
                //};
                //window.console.canvas.onblur = (e) => {
                //    window.console.canvas.focus();
                //};
                window.console.canvas.tabIndex = 0;
                window.console.canvas.focus();
            }

            window.addEventListener("resize", onResize);
        };
    </script>*@
</body>
</html>
